{"version":3,"sources":["Components/NameCountdown.js","Components/TimeCountdown.js","Firebase/index.js","Components/UploadCountdownImage.js","Components/LeftColumnOutputForCountdownView.js","Components/HomePage.js","Components/App.js","serviceWorker.js","index.js"],"names":["NameCountdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","inputValue","document","getElementById","value","length","onNameSelected","react_default","a","createElement","className","type","placeholder","id","onClick","Component","TimeCountdown","onChange","setState","state","Date","handleChange","time","toDateString","onTimeSelected","name","entry_default","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","initializeApp","selectedFile","storageRef","storage","ref","UploadCountdownImage","imgName","imgLocation","ImageURI","handleFileUploadChange","handleFileUploadSubmit","querySelector","addEventListener","e","ImagePreview","target","files","URL","createObjectURL","_this2","child","concat","put","on","snapshot","error","console","log","onImgNameSelected","accept","readOnly","alt","src","LeftColumnOutputForCountdownView","returnToHomePage","onReturnToHomePage","HomePage","handleName","nameValue","countdown_stage","handleTime","endTime","handleImgName","imgNameValue","intervalId","setInterval","setTimeTo","handleReturnToHomePage","timeTo","days","hours","minutes","seconds","clearInterval","interval","delta","getTime","Math","floor","leftColumnOutput","style","countdownOutput","Components_NameCountdown","Components_TimeCountdown","Components_UploadCountdownImage","Components_LeftColumnOutputForCountdownView","backgroundImage","backgroundRepeat","backgroundSize","App","Components_HomePage","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a47fd02a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NameCountdown extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(){\r\n    const inputValue = document.getElementById(\"input_name_for_countdown\").value;\r\n    if(inputValue.length > 0){\r\n      this.props.onNameSelected(inputValue);\r\n    }\r\n    else{\r\n      this.props.onNameSelected(\"...\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Left-Container\">\r\n        <h2>What are you Counting Down To?</h2>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" className=\"form-control\" placeholder=\"Countdown\" id=\"input_name_for_countdown\"/>\r\n          <button className=\"btn btn-primary\" onClick={this.handleClick} type=\"submit\">Submit</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NameCountdown;\r\n","import React, { Component } from 'react';\r\nimport DatePicker from 'react-date-picker';\r\n\r\nclass TimeCountdown extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      value: new Date()\r\n    }\r\n    \r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n  }\r\n\r\n  onChange = value => this.setState({ value })\r\n\r\n  handleChange(){\r\n      let time = this.state.value.toDateString();\r\n    if(time.length > 0){\r\n        this.props.onTimeSelected(time)\r\n    }\r\n    else{\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    return (\r\n      <div className=\"Left-Container\">\r\n        <h2>When Does {this.props.name} Start?</h2>\r\n        <div className=\"form-group\">\r\n          <DatePicker onChange={this.onChange} value={value} />\r\n          <button className=\"btn btn-primary\" onClick={this.handleChange} type=\"submit\">Submit</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimeCountdown;\r\n","import firebase from 'firebase'\r\n\r\nconst REACT_APP_API_KEY=\"AIzaSyDwPbrYyKjoj9llXkcKL2EVCiy0hoVbKyw\"\r\nconst REACT_APP_AUTH_DOMAIN=\"moodcalendar-6676d.firebaseapp.com\"\r\nconst REACT_APP_DATABASE_URL=\"https://moodcalendar-6676d.firebaseio.com\"\r\nconst REACT_APP_PROJECT_ID=\"moodcalendar-6676d\"\r\nconst REACT_APP_STORAGE_BUCKET=\"moodcalendar-6676d.appspot.com\"\r\nconst REACT_APP_MESSAGING_SENDER_ID=\"7576934015\"\r\n\r\nconst config = {\r\n    apiKey: REACT_APP_API_KEY,\r\n    authDomain: REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: REACT_APP_DATABASE_URL,\r\n    projectId: REACT_APP_PROJECT_ID,\r\n    storageBucket: REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: REACT_APP_MESSAGING_SENDER_ID\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport firebase from '../Firebase/'\r\n\r\nconst storageService = firebase.storage();\r\nconst storageRef = storageService.ref();\r\nlet selectedFile;\r\n\r\nclass UploadCountdownImage extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      imgName: \"\",\r\n      imgLocation: null,\r\n      ImageURI: null\r\n    };\r\n\r\n    this.handleFileUploadChange = this.handleFileUploadChange.bind(this);\r\n    this.handleFileUploadSubmit = this.handleFileUploadSubmit.bind(this);\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.querySelector('.file-select').addEventListener('change', this.handleFileUploadChange);\r\n    document.querySelector('.file-submit').addEventListener('click', this.handleFileUploadSubmit);\r\n  }\r\n\r\n  handleFileUploadChange(e) {\r\n\r\n    let ImagePreview = document.getElementById(\"ImagePreview\")\r\n    selectedFile = e.target.files[0];\r\n\r\n    ImagePreview.className += \"show\";\r\n\r\n    document.getElementById(\"imageName\").value = selectedFile.name;\r\n\r\n    this.setState({name: this.state.name, imgName: selectedFile.name, ImageURI: URL.createObjectURL(selectedFile)})\r\n    \r\n  }\r\n\r\n  handleFileUploadSubmit(e) {\r\n     //create a child directory called images, and place the file inside this directory\r\n    const uploadTask = storageRef.child(`images/${selectedFile.name}`).put(selectedFile);\r\n\r\n    uploadTask.on('state_changed', (snapshot) => {\r\n    // Observe state change events such as progress, pause, and resume\r\n    }, (error) => {\r\n      // Handle unsuccessful uploads\r\n      console.log(error);\r\n    }, () => {\r\n       // Do something once upload is complete\r\n       console.log('success');\r\n       this.props.onImgNameSelected(this.state.imgName)\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <div className=\"Left-Container\">\r\n        <h2>Upload An Image For Your Countdown</h2>\r\n        <div className=\"input-group\" id=\"img_upload_input\">\r\n          <label className=\"input-group-btn\">\r\n              <span className=\"btn btn-primary\">\r\n                  Browse&hellip; <input type=\"file\" className=\"file-select\" accept=\"image/*\"/>\r\n              </span>\r\n          </label>\r\n          <input type=\"text\" className=\"form-control\" id=\"imageName\" readOnly/>\r\n        </div>\r\n        <div id=\"ImagePreview\">\r\n          <h3>Image Preview</h3>\r\n          <img alt=\"preview_image\" src={this.state.ImageURI}></img>\r\n          <button className=\"btn btn-primary file-submit\">Submit and View Countdown</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadCountdownImage;\r\n","import React, { Component } from 'react';\r\n\r\nclass LeftColumnOutputForCountdownView extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.returnToHomePage = this.returnToHomePage.bind(this);\r\n    }\r\n    \r\n    returnToHomePage(){\r\n        this.props.onReturnToHomePage();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Left-Container\">\r\n                <h2>Enjoy Your Countdown.</h2>\r\n                <button className=\"btn btn-primary\" type=\"submit\" onClick={this.returnToHomePage}>Create Another Countdown</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LeftColumnOutputForCountdownView;","import React, { Component } from 'react';\r\nimport '../Content/CSS/index.css'\r\nimport NameCountdown from './NameCountdown';\r\nimport TimeCountdown from './TimeCountdown';\r\nimport UploadCountdownImage from './UploadCountdownImage';\r\nimport LeftColumnOutputForCountdownView from './LeftColumnOutputForCountdownView'\r\n\r\nclass HomePage extends Component {\r\n  \r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      name: \"...\",\r\n      countdown_stage: \"Name\",\r\n      endTime: \"...\",\r\n      intervalId: null,\r\n      time: null,\r\n      timeTo: {\r\n          days: \"\",\r\n          hours: \"\",\r\n          minutes: \"\",\r\n          seconds: \"\"\r\n      },\r\n      imgName: \"\"\r\n    }\r\n\r\n    this.setTimeTo = this.setTimeTo.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(this.state.intervalId){\r\n      var intervalId = setInterval(() => {this.setTimeTo(this.state.endTime)}, 1000);\r\n      // store intervalId in the state so it can be accessed later:\r\n      this.setState({intervalId: intervalId});\r\n    }\r\n }\r\n\r\n componentWillUnmount() {\r\n  if(this.state.intervalId){\r\n    clearInterval(this.interval);\r\n  }\r\n}\r\n\r\nsetTimeTo(time){\r\n    let endDate = new Date(time).getTime()\r\n    let now = new Date().getTime();\r\n    let delta = endDate - now;\r\n    this.setState({\r\n      time: time,\r\n      timeTo: {\r\n        days: Math.floor(delta / (1000 * 60 * 60 * 24)),\r\n        hours: Math.floor((delta % (1000* 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n        minutes: Math.floor((delta % (1000 * 60 * 60)) / (1000 * 60)),\r\n        seconds: Math.floor((delta % (1000 * 60)) / 1000)\r\n      }\r\n    })\r\n }\r\n\r\n  handleName = (nameValue) => {\r\n    this.setState({name: nameValue, countdown_stage: \"Time\"});\r\n  }\r\n\r\n  handleTime = (time) => {\r\n    this.setState({endTime: time, countdown_stage: \"UploadImage\"});\r\n  }\r\n\r\n  handleImgName = (imgNameValue) => {\r\n    this.setState({imgName: imgNameValue, countdown_stage: \"CountdownView\"});\r\n\r\n    var intervalId = setInterval(() => {this.setTimeTo(this.state.endTime)}, 1000);\r\n      // store intervalId in the state so it can be accessed later:\r\n      this.setState({intervalId: intervalId});\r\n    \r\n  }\r\n\r\n  handleReturnToHomePage = () => {\r\n    this.setState({name: \"...\", countdown_stage: \"Name\", endTime: \"...\", intervalId: null, time: null, timeTo:{days: \"\", hours: \"\", minutes: \"\", seconds: \"\"}, imgName: \"\"})\r\n  }\r\n\r\n  render() {\r\n\r\n    let leftColumnOutput;\r\n    let style;\r\n    let countdownOutput;\r\n\r\n    if(this.state.countdown_stage === \"Name\"){\r\n      leftColumnOutput = <NameCountdown onNameSelected={this.handleName}/>;\r\n      style = {};\r\n     }else if(this.state.countdown_stage === \"Time\" ){\r\n      leftColumnOutput = <TimeCountdown name={this.state.name} onTimeSelected={this.handleTime}/>;\r\n      style = {};\r\n     }else if(this.state.countdown_stage === \"UploadImage\"){\r\n      leftColumnOutput = <UploadCountdownImage onImgNameSelected={this.handleImgName} />;\r\n      style = {};\r\n     }else if(this.state.countdown_stage === \"CountdownView\"){\r\n      leftColumnOutput = <LeftColumnOutputForCountdownView onReturnToHomePage={this.handleReturnToHomePage} />;\r\n      style = {\r\n        backgroundImage: \"url(\" + \"https://firebasestorage.googleapis.com/v0/b/moodcalendar-6676d.appspot.com/o/images%2F\"+this.state.imgName+\"?alt=media&token=6010d1f9-cea8-4f42-a370-8415d56348bc\" + \")\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"cover\"\r\n      }\r\n      countdownOutput = \"Days: \" + this.state.timeTo.days + \" Hours: \" + this.state.timeTo.hours + \" Minutes: \" + this.state.timeTo.minutes + \" Seconds: \" + this.state.timeTo.seconds;\r\n     }\r\n\r\n    return (\r\n      <div className=\"Container\">\r\n        <div className=\"LeftInnerContainer\">\r\n          {leftColumnOutput}\r\n        </div>\r\n        <div className=\"RightInnerContainer\">\r\n          <div>\r\n            <h2>Counting Down To {this.state.name}</h2>\r\n          </div>\r\n          <div>\r\n            <h2>{this.state.name} Starts on {this.state.endTime}</h2>\r\n          </div>\r\n          <div>\r\n          {countdownOutput}\r\n            <div style={style}></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport HomePage from './HomePage'\r\nimport '../Content/CSS/bootstrap.min.css'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <HomePage />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Content/CSS/index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}